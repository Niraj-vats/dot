{"mappings":"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","sources":["frontend/app.js","frontend/routers/index.js","frontend/routers/homeRouters/homeRouter.js","frontend/controllers/HomeController.js","frontend/partials/navbar.js","frontend/utils/navlink.js","frontend/routers/userRouters/userRouter.js","frontend/controllers/authController/LogInController.js","frontend/services/AuthService.js","frontend/apis/authApis.js","frontend/services/CookieServices.js","frontend/controllers/authController/SignUpController.js","frontend/controllers/authController/LogOutController.js","frontend/controllers/userController/userProfileController.js","frontend/services/UserProfileService.js","frontend/apis/userProfileApis.js","frontend/routers/friendRouters/friendRouter.js","frontend/controllers/authController/authController.js","frontend/controllers/communicationController/communicationController.js","frontend/store/dataStore.js","frontend/controllers/chatController/chatController.js","frontend/services/WsService.js","frontend/controllers/friendController/FriendControllers.js","frontend/services/FriendServices.js","frontend/apis/friendApis.js"],"sourcesContent":["import \"./routers/index.js\"\n","import './homeRouters/homeRouter.js';\nimport './userRouters/userRouter.js';\nimport './friendRouters/friendRouter.js'\n\n// Start page.js routing\npage();\n","import HomeController from '../../controllers/HomeController.js';\nimport { createNavbar } from '../../partials/navbar.js';\n\n// Create an instance of the HomeController\nconst homeController = new HomeController();\n\n// Function to render content with navbar for Home\nfunction renderHomePage(content) {\n    const appElement = document.getElementById(\"app\");\n    appElement.innerHTML = \"\"; // Clear the app div\n    appElement.appendChild(createNavbar()); // Add the navbar\n    appElement.appendChild(content);\n}\n\n// Define your home route using page.js\npage('/', () => {\n    renderHomePage(homeController.getHomeContainer());\n});\n\nexport { renderHomePage };\n","class HomeController {\n    constructor() {\n      // Initialize any properties or state needed for the home page\n      this.homeContainer = this.renderHome();\n    }\n  \n    renderHome() {\n      // Create a container element for the home page content\n      const container = document.createElement(\"div\");\n      container.classList.add(\"home-container\"); // You can add CSS classes for styling\n  \n      // Create and add content to the home page\n      const heading = document.createElement(\"h1\");\n      heading.textContent = \"Welcome to the Home Page\";\n  \n      const paragraph = document.createElement(\"p\");\n      paragraph.textContent = \"This is the home page content.\";\n  \n      // Append the elements to the container\n      container.appendChild(heading);\n      container.appendChild(paragraph);\n  \n      return container; // Return the container as a Node\n    }\n  \n    getHomeContainer() {\n      return this.homeContainer;\n    }\n  }\n  \n  export default HomeController;\n  ","import { NavLink } from \"../utils/navlink.js\";\n\nexport function createNavbar() {\n    const navElement = document.createElement('nav');\n    navElement.classList.add('navbar'); // Add a class for styling\n\n    // Create NavLink instances\n    const homeLink = new NavLink('Home', '/');\n    const loginLink = new NavLink('Login', '/login');\n    const signupLink = new NavLink('Signup', '/signup');\n    const profileLink = new NavLink('Profile', '/profile'); // Replace ':userId' with actual user ID\n    const friendsLink = new NavLink('Friends', '/friends');\n\n    // Create a <ul> element\n    const ulElement = document.createElement('ul');\n    ulElement.classList.add('navbar-list'); // Add a class for styling\n\n    // Append NavLink elements to the <ul>\n    ulElement.appendChild(homeLink.getElement());\n    ulElement.appendChild(loginLink.getElement());\n    ulElement.appendChild(signupLink.getElement());\n    ulElement.appendChild(profileLink.getElement());\n    ulElement.appendChild(friendsLink.getElement());\n\n    // Create a theme toggle button\n    const themeToggleButton = document.createElement('button');\n    themeToggleButton.classList.add('theme-toggle-button');\n    themeToggleButton.textContent = 'Toggle Theme';\n\n    // Create an <li> element for the theme toggle\n    const themeToggleLi = document.createElement('li');\n    themeToggleLi.classList.add('theme-toggle'); // Add a class for styling\n    themeToggleLi.appendChild(themeToggleButton);\n\n    // Append the theme toggle <li> to the <ul>\n    ulElement.appendChild(themeToggleLi);\n\n    // Function to toggle the theme\n    function toggleTheme() {\n        const body = document.body;\n        const themes = ['light-theme', 'dark-theme', 'skyblue-theme', 'blood-red-theme','neon-theme' , 'darkest-dark-theme' , 'lightest-light-theme' , 'windows-xp-theme' , \".whatsapp-dark-theme\" , \".whatsapp-light-theme\"];\n        \n        // Get the current theme class\n        const currentTheme = themes.find(theme => body.classList.contains(theme));\n    \n        // Remove the current theme class\n        body.classList.remove(currentTheme);\n    \n        // Choose a random theme (excluding the current one)\n        let randomTheme;\n        do {\n            randomTheme = themes[Math.floor(Math.random() * themes.length)];\n        } while (randomTheme === currentTheme);\n    \n        // Apply the random theme to the body\n        body.classList.add(randomTheme);\n    }\n    \n\n    // Attach the toggleTheme function to the theme button's click event\n    themeToggleButton.addEventListener('click', toggleTheme);\n\n    // Append the <ul> to the <nav>\n    navElement.appendChild(ulElement);\n\n    return navElement;\n}\n","class NavLink {\n    constructor(text, path) {\n        this.text = text;\n        this.path = path;\n        this.element = this.createLinkElement();\n        this.init();\n    }\n\n    createLinkElement() {\n        const link = document.createElement('a');\n        link.textContent = this.text;\n        link.href = this.path;\n        link.setAttribute('data-link', 'true'); // Add a data attribute to identify it as a navigation link\n        return link;\n    }\n\n    init() {\n        // Listen for clicks on the link\n        this.element.addEventListener('click', (event) => {\n            event.preventDefault();\n            this.navigateTo();\n        });\n    }\n\n    navigateTo() {\n        // Change the URL without a full page reload\n        history.pushState(null, null, this.path);\n\n        // Trigger a popstate event to handle the route change\n        const popstateEvent = new PopStateEvent('popstate', { state: { path: this.path } });\n        window.dispatchEvent(popstateEvent);\n    }\n\n    getElement() {\n        return this.element;\n    }\n\n    isActive() {\n        // Get the current URL path\n        const currentPath = window.location.pathname;\n\n        // Check if the link's path matches the current path\n        return currentPath === this.path;\n    }\n}\n\nexport { NavLink };\n","import LoginController from '../../controllers/authController/LogInController.js';\nimport SignUpController from '../../controllers/authController/SignUpController.js';\nimport LogoutController from '../../controllers/authController/LogOutController.js';\nimport UserProfileController from '../../controllers/userController/userProfileController.js'; // Importing UserProfileController\nimport { createNavbar } from '../../partials/navbar.js';\n\n// Create instances of the controllers\nconst loginController = new LoginController();\nconst signUpController = new SignUpController();\nconst logoutController = new LogoutController();\nconst userProfileController = new UserProfileController(); // Creating an instance of UserProfileController\n\n// Function to render content with navbar for User\nfunction renderUserPage(content) {\n    const appElement = document.getElementById(\"app\");\n    appElement.innerHTML = \"\"; // Clear the app div\n    appElement.appendChild(createNavbar()); // Add the navbar\n    appElement.appendChild(content);\n}\n\n// Define your user routes and controllers using page.js\npage('/login', () => {\n    renderUserPage(loginController.getFormContainer());\n});\n\npage('/signup', () => {\n    renderUserPage(signUpController.renderSignUpForm());\n});\n\npage('/logout', () => {\n    // Handle logout here using the LogoutController\n    logoutController.handleLogout();\n});\n\n// Using the UserProfileController instance named userProfileController\npage('/profile',async () => {\n    renderUserPage( await userProfileController.getProfileContainer() );\n});\n\nexport { renderUserPage };\n","// Import the AuthService class\nimport AuthService from '../../services/AuthService.js';\n\nclass LoginController {\n    constructor() {\n        this.username = \"\";\n        this.password = \"\";\n        this.isLoggedIn = false;\n        this.formContainer = this.renderLoginForm();\n        // Create an instance of AuthService\n        this.authService = new AuthService();\n    }\n\n    handleInputChange(event) {\n        const { name, value } = event.target;\n        this[name] = value;\n    }\n\n    async handleLoginSubmit(event) {\n        event.preventDefault();\n\n        // Use the authService instance to handle the login process\n        const loginData = {\n            username: this.username,\n            password: this.password,\n        };\n\n        try {\n            const response = await this.authService.login(loginData);\n            // Check if the login was successful based on the response (adjust as needed)\n            if (response.token) {\n                this.isLoggedIn = true;\n                document.cookie = `token=${response.token}; path=/`;\n                window.location.href = \"/friends\"; // Redirect to the home page\n                return\n            } else {\n                this.isLoggedIn = false;\n                // Handle login failure (display error message, etc.)\n                console.error(\"Login failed.\");\n            }\n        } catch (error) {\n            console.error(\"An error occurred during login:\", error);\n        }\n\n        // Re-render the form after login attempt\n        this.formContainer.innerHTML = \"\";\n        this.formContainer.appendChild(this.renderLoginForm());\n    }\n\n    renderLoginForm() {\n        const { username, password, isLoggedIn } = this;\n    \n        if (isLoggedIn) {\n            return document.createDocumentFragment(); // Render nothing if logged in\n        }\n    \n        const formContainer = document.createElement(\"div\");\n        formContainer.classList.add(\"login-container\");  // Adding class for centering\n    \n        const formTitle = document.createElement(\"h2\");\n        formTitle.textContent = \"Login\";\n    \n        const form = document.createElement(\"form\");\n        form.classList.add(\"login-form\");  // Adding class for styling\n        form.addEventListener(\"submit\", this.handleLoginSubmit.bind(this));\n    \n        const fields = [\n            { label: \"Username:\", type: \"text\", name: \"username\", value: username },\n            { label: \"Password:\", type: \"password\", name: \"password\", value: password },\n        ];\n    \n        fields.forEach(({ label, type, name, value }) => {\n            const labelElement = document.createElement(\"label\");\n            labelElement.textContent = label;\n    \n            const inputElement = document.createElement(\"input\");\n            inputElement.type = type;\n            inputElement.name = name;\n            inputElement.value = value;\n            inputElement.required = true;  // Making fields required\n    \n            if (name === \"username\") {\n                // inputElement.pattern = \"^[a-zA-Z0-9]+$\";\n                inputElement.title = \"Username can only contain alphanumeric characters\";\n            }\n    \n            inputElement.addEventListener(\"input\", this.handleInputChange.bind(this));\n    \n            form.appendChild(labelElement);\n            form.appendChild(inputElement);\n        });\n    \n        const loginButton = document.createElement(\"button\");\n        loginButton.type = \"submit\";\n        loginButton.textContent = \"Login\";\n    \n        form.appendChild(loginButton);\n        formContainer.appendChild(formTitle);\n        formContainer.appendChild(form);\n    \n        return formContainer;\n    }\n\n    getFormContainer() {\n        return this.formContainer;\n    }\n}\n\nexport default LoginController;\n","import AuthAPI from '../apis/authApis.js';\n\nclass AuthService {\n    constructor() {\n        this.authAPI = new AuthAPI();\n    }\n\n    async login(credentials) {\n        try {\n            // Call the login method from the AuthAPI\n            const response = await this.authAPI.login(credentials.username, credentials.password);\n\n            // Handle the login response as needed\n            return response;\n        } catch (error) {\n            console.error(\"AuthService - Login error:\", error);\n            throw error; // Propagate the error\n        }\n    }\n\n    async signup(username, password, email, name) {\n        try {\n            // Call the signup method from the AuthAPI\n            const response = await this.authAPI.signup(username, password, email, name);\n\n            // Handle the signup response as needed\n            return response;\n        } catch (error) {\n            console.error(\"AuthService - Signup error:\", error);\n            throw error; // Propagate the error\n        }\n    }\n\n    async logout() {\n        try {\n            // Call the logout method from the AuthAPI\n            const response = await this.authAPI.logout();\n            // Handle the logout response as needed\n            return response;\n        } catch (error) {\n            console.error(\"AuthService - Logout error:\", error);\n            throw error; // Propagate the error\n        }\n    }\n\n    async isLoggedin(){\n        const currentUser = await this.authAPI.getCurrentUser();\n        return currentUser\n    }\n\n    // Other authentication-related methods can be added here\n}\n\nexport default AuthService;\n","import { CookieService } from \"../services/CookieServices.js\";\n\nclass AuthAPI {\n\n    constructor() {\n        this.cookieService = new CookieService()\n    }\n\n    setAuthToken(token) {\n        // Set the token in a cookie with a 7-day expiration (adjust as needed)\n        this.cookieService.setCookie(\"token\", token, 7);\n    }\n\n    async login(username, password) {\n        try {\n            const response = await fetch(\"/auth/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ username, password }),\n            });\n\n            console.log(response);\n\n            return response.json();\n        } catch (error) {\n            console.error(\"AuthAPI - Login error:\", error);\n            throw error;\n        }\n    }\n\n    async signup(username, password, email, name) {\n        try {\n            const response = await fetch(\"/auth/signup\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ username, password, email, name }),\n            });\n\n            return response.json();\n        } catch (error) {\n            console.error(\"AuthAPI - Signup error:\", error);\n            throw error;\n        }\n    }\n\n\n    async logout() {\n        try {\n            const response = await fetch(\"/auth/logout\", {\n                method: \"POST\", // You can use POST or any suitable HTTP method for logout\n            });\n\n            return response.json();\n        } catch (error) {\n            console.error(\"AuthAPI - Logout error:\", error);\n            throw error; // Propagate the error\n        }\n    }\n\n    async getCurrentUser() {\n        try {\n            // Retrieve the token from the cookie\n            const token = this.cookieService.getCookie(\"token\");\n\n            if (!token) {\n                // Token not found, user is not authenticated\n                return {error : \"token not found\"}\n            }\n\n            // Perform the actual API request to check the current user's status\n            const response = await fetch(\"/auth/getCurrentUser\", {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`, // Include the bearer token here\n                },\n            });\n\n            let data = await response.json()\n\n            return data;\n        } catch (error) {\n            console.error(\"AuthAPI - Check current user error:\", error);\n            throw error; // Propagate the error\n        }\n    }\n\n    // Other authentication-related API methods can be added here\n}\n\nexport default AuthAPI;\n","\n\nclass CookieService {\n    // Function to set a cookie with a given name, value, and expiration time\n    setCookie(name, value, expirationDays) {\n        const date = new Date();\n        date.setTime(date.getTime() + (expirationDays * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;\n    }\n\n    // Function to get the value of a cookie by name\n    getCookie(name) {\n        const cookieName = `${name}=`;\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            let cookie = cookies[i];\n            while (cookie.charAt(0) === ' ') {\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(cookieName) === 0) {\n                return cookie.substring(cookieName.length, cookie.length);\n            }\n        }\n        return \"\";\n    }\n\n    // Function to delete a cookie by name\n    deleteCookie(name) {\n        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n    }\n}\n\nexport {CookieService} ;\n","import AuthService from '../../services/AuthService.js';\n\nclass SignUpController {\n    constructor() {\n        this.state = {\n            email: \"\",\n            name: \"\",\n            username: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            isSignedUp: false,\n            validationErrors: {\n                email: \"\",\n                name: \"\",\n                username: \"\",\n                password: \"\",\n                confirmPassword: \"\"\n            }\n        };\n        this.formContainer = this.renderSignUpForm();\n        this.authService = new AuthService();\n    }\n\n    handleInputChange(e) {\n        const { name, value } = e.target;\n        this.state[name] = value;\n        \n        // Clear the error message for the corresponding field\n        this.state.validationErrors[name] = \"\";\n        \n        // Update the DOM to remove the error message\n        this.updateDOM();\n    }\n\n    async handleSignUpSubmit(e) {\n        e.preventDefault();\n\n        // Validate the form fields\n        const validationErrors = this.validateForm();\n\n        // If there are validation errors, display them and prevent submission\n        if (Object.values(validationErrors).some((error) => error !== \"\")) {\n            this.state.validationErrors = validationErrors; // Update validation errors\n            this.updateDOM(); // Update the DOM to display error messages\n            return;\n        }\n\n        // If validation is successful, proceed with sign-up\n        try {\n            const response = await this.authService.signup(this.state);\n\n            if (response.success) {\n                this.state.isSignedUp = true;\n\n                const message = document.createElement(\"p\");\n                message.textContent = `Sign-up successful for ${this.state.username}!`;\n\n                const logoutButton = document.createElement(\"button\");\n                logoutButton.textContent = \"Logout\";\n                logoutButton.addEventListener(\"click\", () => {\n                    message.remove();\n                    logoutButton.remove();\n                });\n\n                this.formContainer.innerHTML = \"\";\n                this.formContainer.appendChild(message);\n                this.formContainer.appendChild(logoutButton);\n            } else {\n                console.error(\"Sign-up failed.\");\n            }\n        } catch (error) {\n            console.error(\"An error occurred during sign-up:\", error);\n        }\n    }\n\n    validateForm() {\n        const { email, name, username, password, confirmPassword } = this.state;\n        const validationErrors = {\n            email: \"\",\n            name: \"\",\n            username: \"\",\n            password: \"\",\n            confirmPassword: \"\"\n        };\n\n        // Validation logic for each field\n        if (!email || !email.match(/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/)) {\n            validationErrors.email = \"Invalid email address\";\n        }\n\n        if (!name || name.length < 8) {\n            validationErrors.name = \"Name must be at least 8 characters\";\n        }\n\n        if (!username || username.length < 8) {\n            validationErrors.username = \"Username must be at least 8 characters\";\n        }\n\n        if (!password || !password.match(/^(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*])(?=.{8,})/)) {\n            validationErrors.password = \"Password must contain at least 1 uppercase, 1 lowercase, 1 special character, and be at least 8 characters\";\n        }\n\n        if (password !== confirmPassword) {\n            validationErrors.confirmPassword = \"Passwords do not match\";\n        }\n\n        return validationErrors;\n    }\n\n    renderSignUpForm() {\n        const formContainer = document.createElement(\"div\");\n        formContainer.id = \"signup-container\";\n    \n        const formTitle = document.createElement(\"h2\");\n        formTitle.textContent = \"Sign Up\";\n    \n        const form = document.createElement(\"form\");\n        form.id = \"signup-form\";\n        form.addEventListener(\"submit\", this.handleSignUpSubmit.bind(this));\n    \n        const fields = [\n            { label: 'Email', type: 'email', name: 'email', value: this.state.email, maxLength: 50 },\n            { label: 'Name', type: 'text', name: 'name', value: this.state.name, maxLength: 50 },\n            { label: 'Username', type: 'text', name: 'username', value: this.state.username, maxLength: 30 },\n            { label: 'Password', type: 'password', name: 'password', value: this.state.password, maxLength: 20 },\n            { label: 'Confirm Password', type: 'password', name: 'confirmPassword', value: this.state.confirmPassword, maxLength: 20 }\n        ];\n    \n        fields.forEach(({ label, type, name, value, maxLength }) => {\n            const labelElement = document.createElement(\"label\");\n            labelElement.textContent = label;\n    \n            const inputElement = document.createElement(\"input\");\n            inputElement.type = type;\n            inputElement.name = name;\n            inputElement.value = value;\n            inputElement.maxLength = maxLength; // Set max length\n    \n            inputElement.addEventListener(\"input\", this.handleInputChange.bind(this));\n    \n            // Create a container for label and input in a single row\n            const formRow = document.createElement(\"div\");\n            formRow.className = \"form-row\";\n    \n            formRow.appendChild(labelElement);\n            formRow.appendChild(inputElement);\n    \n            // Add validation error message element\n            const errorElement = document.createElement(\"span\");\n            errorElement.className = \"error-message\";\n            errorElement.textContent = this.state.validationErrors[name];\n    \n            // Append error message element to the form row\n            formRow.appendChild(errorElement);\n    \n            form.appendChild(formRow);\n        });\n    \n        const signUpButton = document.createElement(\"button\");\n        signUpButton.id = \"signup-button\";\n        signUpButton.type = \"submit\";\n        signUpButton.textContent = \"Sign Up\";\n    \n        form.appendChild(signUpButton);\n        formContainer.append(formTitle, form);\n    \n        return formContainer;\n    }\n\n    updateDOM() {\n        // This method updates the DOM to display validation error messages\n        // Loop through the form fields and update error messages\n        const form = document.getElementById(\"signup-form\");\n        form.querySelectorAll(\".form-row\").forEach((formRow) => {\n            const fieldName = formRow.querySelector(\"input\").name;\n            const errorElement = formRow.querySelector(\".error-message\");\n            errorElement.textContent = this.state.validationErrors[fieldName];\n        });\n    }\n    \n    getFormContainer() {\n        return this.formContainer;\n    }\n}\n\nexport default SignUpController;","// LogoutController.js\nimport AuthService from '../../services/AuthService.js';\n\nclass LogoutController {\n    constructor() {\n        this.buttonContainer = null;\n        this.logoutButton = null;\n    }\n\n    async handleLogout() {\n        // Use the AuthService to perform the logout\n        const isLoggedOut = await AuthService.logout();\n\n        if (isLoggedOut) {\n            // Redirect the user to the login page after successful logout\n            window.location.href = \"/login\";\n        } else {\n            // Handle logout failure (optional)\n            console.error(\"Logout failed.\");\n        }\n\n        // You can also remove any user-specific data from local storage or perform other logout-related tasks here.\n    }\n\n    render() {\n        if (!this.buttonContainer) {\n            this.buttonContainer = document.createElement(\"div\");\n            this.logoutButton = document.createElement(\"button\");\n            this.logoutButton.textContent = \"Logout\";\n\n            // Add a click event listener to the logout button\n            this.logoutButton.addEventListener(\"click\", () => {\n                this.handleLogout();\n            });\n\n            this.buttonContainer.appendChild(this.logoutButton);\n        }\n\n        return this.buttonContainer;\n    }\n\n    getLogoutButton() {\n        if (!this.buttonContainer) {\n            this.render(); // Ensure the button is rendered\n        }\n        return this.buttonContainer;\n    }\n}\n\nexport default LogoutController;\n","import UserProfileService from '../../services/UserProfileService.js';\n\nclass UserProfileController {\n    constructor() {\n        this.service = new UserProfileService();\n        this.state = {\n            name: '',\n            email: '',\n            mobile: '',\n            activeHours: '',\n            lastActive: '',\n            bio: '',\n            isEditing: false\n        };\n        this.mainContainer = document.createElement('div');\n        this.mainContainer.id = 'UserProfileControllerContainer';\n       \n    }\n\n    createInfoElement(label, value, isEditable = false) {\n        const div = document.createElement('div');\n        const infoLabel = document.createElement('span');\n        infoLabel.textContent = label + ': ';\n        div.appendChild(infoLabel);\n\n        if (this.state.isEditing && isEditable) {\n            const input = document.createElement('input');\n            input.value = value;\n            input.addEventListener('input', (e) => {\n                this.state[label.toLowerCase()] = e.target.value;\n            });\n            div.appendChild(input);\n        } else {\n            const infoValue = document.createElement('span');\n            infoValue.textContent = value;\n            div.appendChild(infoValue);\n        }\n\n        return div;\n    }\n\n    makeFieldsEditable() {\n        this.state.isEditing = true;\n        this.displayProfile();\n    }\n\n    async updateProfile() {\n        const updatedData = await this.service.updateProfile(this.state);\n        Object.assign(this.state, updatedData);\n        this.state.isEditing = false;\n        this.displayProfile();\n    }\n\n    async renderProfile() {\n        const profileData = await this.service.getProfile();\n        Object.assign(this.state, profileData);\n\n        const container = document.createElement('div');\n        container.classList.add('profile-content');\n\n        const elements = [\n            ['Name', profileData.name, true],\n            ['Email', profileData.email, true],\n            ['Mobile', profileData.mobile, true],\n            ['Active Hours', profileData.activeHours, true],\n            ['Last Active', profileData.lastActive],\n            ['Bio', profileData.bio, true]\n        ].map(([label, value, isEditable]) => this.createInfoElement(label, value, isEditable));\n\n        const editButton = document.createElement('button');\n        editButton.textContent = 'Edit';\n        editButton.addEventListener('click', this.makeFieldsEditable.bind(this));\n\n        const updateButton = document.createElement('button');\n        updateButton.textContent = 'Update';\n        updateButton.addEventListener('click', this.updateProfile.bind(this));\n\n        container.append(...elements, editButton, updateButton);\n\n        return container;\n    }\n\n    async displayProfile() {\n        const newContent = await this.renderProfile();\n        this.mainContainer.innerHTML = '';\n        this.mainContainer.appendChild(newContent);\n        this.updateDOM();\n    }\n\n    updateDOM() {\n        const existingContainer = document.getElementById('UserProfileControllerContainer');\n        if (existingContainer) {\n            existingContainer.replaceWith(this.mainContainer);\n        } else {\n            document.body.appendChild(this.mainContainer);\n        }\n    }\n\n    async getProfileContainer() {\n        const newContent = await this.renderProfile();\n        this.mainContainer.innerHTML = '';\n        this.mainContainer.appendChild(newContent);\n        return this.mainContainer;\n    }\n}\n\nexport default UserProfileController;\n","import UserProfileApi from \"../apis/userProfileApis.js\"\n\nclass UserProfileService {\n  constructor() {\n    this.api = new UserProfileApi();\n  }\n\n  async getProfile() {\n    return this.api.getProfile();\n  }\n\n  async updateProfile(newData) {\n    return this.api.updateProfile(newData);\n  }\n}\n\nexport default UserProfileService;\n","class UserProfileApi {\n  async getProfile() {\n    return {\n      name: \"John Doe\",\n      email: \"john@example.com\",\n      lastActive: \"2023-09-05T12:34:56Z\",\n      bio: \"This is John Doe's bio.\",\n      mobile: \"123-456-7890\",\n      activeHours: \"9 AM - 5 PM\"\n      // ... other attributes\n    };\n  }\n  \n    async updateProfile(newData) {\n      // Simulate an API call to update the profile and return updated data\n      return Promise.resolve(newData);\n    }\n  \n    // Additional methods for other CRUD operations can be added here\n  }\n  \n  export default UserProfileApi;\n  ","import { createNavbar } from '../../partials/navbar.js';\n\n\nimport { AuthController } from '../../controllers/authController/authController.js';\nimport CommunicationController from '../../controllers/communicationController/communicationController.js';\n\n\n// Create an instance of the FriendController\nconst communicationController = new CommunicationController()\nconst authController = new AuthController()\n\n// Flag to track if friends list has been initialized\nlet friendsListInitialized = false;\n\nfunction renderFriendPage(content) {\n    const appElement = document.getElementById(\"app\");\n    appElement.innerHTML = \"\"; // Clear the app div\n    appElement.appendChild(createNavbar()); // Add the navbar\n    appElement.appendChild(content);\n}\n\n// Define your friend routes using page.js\npage('/friends', () => {\n    console.log('started');\n    authController.isSignedIn().then((data) => {\n        if(!data.error && data.user != null){\n            if (!friendsListInitialized) {\n                communicationController.init(data.user).then(() => {\n                    renderFriendPage(communicationController.getCommunicationContainer());\n                    friendsListInitialized = true;\n                });\n            } else {\n                // Friends list has already been initialized, just render it\n                renderFriendPage(communicationController.getCommunicationContainer());\n            }\n    \n        }else{\n            window.location.href=\"/login\"\n        }\n    })\n    \n})\n\nexport { renderFriendPage };\n","import AuthService from \"../../services/AuthService.js\"\n\nclass AuthController{\n    constructor(){\n        this.authService = new AuthService()\n    }\n\n    async isSignedIn(){\n        let activeUser = await this.authService.isLoggedin()\n        console.log(activeUser);\n        return activeUser\n    }\n}\n\nexport {AuthController}","import DataStore from \"../../store/dataStore.js\"\nimport ChatController from \"../chatController/chatController.js\"\nimport FriendController from \"../friendController/FriendControllers.js\"\n\nclass CommunicationController{\n    constructor(){\n        this.dataStore = new DataStore()\n        this.controllerId = 'communication-controller'\n        this.friendController = new FriendController(this.dataStore)\n        this.chatController = new ChatController(this.dataStore)\n    }\n\n    async init(user){\n        this.friendController.init()\n        this.chatController.init()\n        this.friendController.addChatController(this.chatController)\n        this.dataStore.setUser(user)\n    }\n\n    getCommunicationContainer(){\n        const communicationControllerDiv = document.createElement(\"div\");\n        communicationControllerDiv.id = this.controllerId;\n        const friendContainer = this.friendController.getFriendsContainer()\n        const chatContainer = this.chatController.getChatContainer()\n\n        communicationControllerDiv.appendChild(friendContainer)\n        communicationControllerDiv.appendChild(chatContainer)\n\n        console.log(communicationControllerDiv);\n\n        return communicationControllerDiv\n    }\n\n\n}\n\nexport default CommunicationController","class DataStore {\n    constructor() {\n        this.friends = []; // Array to store friend objects\n        this.activeFriend = null; // Currently active friend\n        this.user = null\n    }\n\n    setUser(user){\n        this.user = user\n        console.log(this.user);\n    }\n\n    // Method to search for friends based on a query\n    searchFriends(query) {\n        query = query.toLowerCase(); // Convert the query to lowercase for case-insensitive search\n        return this.friends.filter((friend) => {\n            // Customize the search criteria based on your needs\n            // Here, we're searching by friend name\n            return friend.name.toLowerCase().includes(query);\n        });\n    }\n\n    // Method to set the active friend\n    setActiveFriend(friend) {\n        this.activeFriend = friend;\n    }\n\n    // Method to get the active friend\n    getActiveFriend() {\n        return this.activeFriend;\n    }\n\n    // Method to set the friends list\n    setFriends(friends) {\n        this.friends = friends;\n    }\n\n    // Method to add a new friend\n    addFriend(friend) {\n        this.friends.push(friend);\n    }\n\n    // Method to remove a friend\n    removeFriend(friendId) {\n        this.friends = this.friends.filter((friend) => friend.id !== friendId);\n    }\n\n    // Method to update a friend's details\n    updateFriend(friendId, updatedFriendData) {\n        this.friends = this.friends.map((friend) => {\n            if (friend.id === friendId) {\n                return { ...friend, ...updatedFriendData };\n            }\n            return friend;\n        });\n    }\n\n    // Method to send a message to the active friend\n    sendMessage(message) {\n        if (this.activeFriend) {\n            // Check if there's an active friend\n            if (!this.activeFriend.messages) {\n                this.activeFriend.messages = []; // Initialize an empty array for messages\n            }\n            this.activeFriend.messages.push(message); // Add the message to the active friend's messages\n        }\n    }\n\n    // Method to add a message to a specific friend\n    addMessage(friendId, message) {\n        const friend = this.friends.find((friend) => friend.id === friendId);\n        if (friend) {\n            if (!friend.messages) {\n                friend.messages = [];\n            }\n            friend.messages.push(message);\n        }\n    }\n\n    // Method to get messages from the active friend\n    getMessages() {\n        return this.activeFriend ? this.activeFriend.messages || [] : [];\n    }\n\n    // Method to update the last message with the active friend\n    updateLastMessage(message) {\n        if (this.activeFriend) {\n            this.activeFriend.lastMessage = message;\n        }\n    }\n}\n\nexport default DataStore;","import WebSocketService from \"../../services/WsService.js\";\n\nclass ChatController {\n    constructor(store) {\n        this.controllerId = 'chat-controller';\n        this.store = store;\n        this.component = this.createChatPlaceholder();\n        this.webSocketService = new WebSocketService(\"ws://localhost:3000\"); // Inject the WebSocketService\n        this.curentMessage = ''\n    }\n\n    createChatPlaceholder() {\n        const chatControllerDiv = document.createElement(\"div\");\n        chatControllerDiv.id = this.controllerId;\n        return chatControllerDiv;\n    }\n\n    async init() {\n        this.appendChatToComponent();\n        this.initWebSocket()\n    }\n\n    appendChatToComponent() {\n        if (this.component) {\n            const chatUI = this.createChatUI();\n            this.component.appendChild(chatUI);\n        }\n    }\n\n    createChatUI() {\n        const chatUIContainer = document.createElement(\"div\");\n        chatUIContainer.classList.add(\"chat-ui-container\");\n\n        if (!this.store.getActiveFriend()) {\n            chatUIContainer.appendChild(this.createEmptyChatContainer());\n        } else {\n            this.activeFriend = this.store.getActiveFriend();\n            chatUIContainer.appendChild(this.createChatHeader());\n            chatUIContainer.appendChild(this.createChatMessagesContainer());\n            chatUIContainer.appendChild(this.createChatInputContainer());\n        }\n\n        return chatUIContainer;\n    }\n\n    // Create the empty chat container\n    createEmptyChatContainer() {\n        const emptyChatContainer = document.createElement(\"div\");\n        emptyChatContainer.classList.add(\"empty-chat-container\");\n\n        const chatComponentPlaceholder = document.createElement(\"div\");\n        chatComponentPlaceholder.classList.add(\"empty-chat-component\");\n\n        emptyChatContainer.appendChild(chatComponentPlaceholder);\n\n        return emptyChatContainer;\n    }\n\n    // Create the chat header\n    createChatHeader() {\n        const chatHeader = document.createElement(\"div\");\n        chatHeader.classList.add(\"chat-header\");\n\n        chatHeader.appendChild(this.createProfilePic());\n        chatHeader.appendChild(this.createFriendName());\n        chatHeader.appendChild(this.createStatusDot());\n\n        return chatHeader;\n    }\n\n    // Create the profile picture element\n    createProfilePic() {\n        const profilePic = document.createElement(\"img\");\n        profilePic.src = this.activeFriend.profilePic;\n        profilePic.alt = this.activeFriend.name;\n        profilePic.classList.add(\"profile-pic\");\n        return profilePic;\n    }\n\n    // Create the friend name element\n    createFriendName() {\n        const friendName = document.createElement(\"span\");\n        friendName.textContent = this.activeFriend.name;\n        friendName.classList.add(\"friend-name\");\n        return friendName;\n    }\n\n    // Create the status dot element\n    createStatusDot() {\n        const statusDot = document.createElement(\"div\");\n        statusDot.classList.add(\"status-dot\", this.activeFriend.status === \"active\" ? \"active-status\" : \"inactive-status\");\n        return statusDot;\n    }\n\n    // Create the chat messages container\n    createChatMessagesContainer() {\n        const chatMessagesContainer = document.createElement(\"ul\");\n        chatMessagesContainer.classList.add(\"chat-messages\");\n\n        // Append existing messages to the chat messages container\n        const messages = this.store.getMessages();\n        messages.forEach((message) => {\n            this.appendMessageToChat(chatMessagesContainer, message);\n        });\n\n        return chatMessagesContainer;\n    }\n\n\n    // Create the chat input container\n    createChatInputContainer() {\n        const chatInputContainer = document.createElement(\"div\");\n        chatInputContainer.classList.add(\"chat-input\");\n\n        chatInputContainer.appendChild(this.createMessageInput());\n        chatInputContainer.appendChild(this.createSendButton());\n\n        return chatInputContainer;\n    }\n\n    // Create the message input field\n    createMessageInput() {\n        const messageInput = document.createElement(\"input\");\n        messageInput.type = \"text\";\n        messageInput.placeholder = \"Type a message...\";\n        messageInput.classList.add(\"message-input\");\n\n        // Set the input value to the currentMessage\n        messageInput.value = this.curentMessage;\n\n        messageInput.addEventListener(\"change\", (e) => {\n            // Update the currentMessage when the input changes\n            this.currentMessage = e.target.value;\n            console.log(this.currentMessage);\n        });\n\n        return messageInput;\n    }\n\n    // Create the send button\n    createSendButton() {\n        const sendButton = document.createElement(\"button\");\n        sendButton.textContent = \"Send\";\n        sendButton.classList.add(\"send-button\");\n\n        sendButton.addEventListener(\"click\", () => {\n            // Get the message from currentMessage\n            const message = this.currentMessage.trim();\n\n            if (message) {\n                this.sendMessage(message);\n                // Clear the input field after sending\n                this.currentMessage = '';\n                const messageInput = this.component.querySelector(\".message-input\");\n                messageInput.value = '';\n            }\n        });\n\n        return sendButton;\n    }\n\n    renderChat() {\n        this.component.innerHTML = '';\n        let chatComponent = this.createChatUI();\n        this.component.appendChild(chatComponent);\n\n        this.toggleChatDisplay();\n    }\n\n    getChatContainer() {\n        return this.component;\n    }\n\n    showChatUI() {\n        const chatUI = document.querySelector('.chat-ui-container');\n\n        if (chatUI) {\n            chatUI.style.display = 'flex';\n            this.hideFriendList();\n        }\n    }\n\n    hideFriendList() {\n        const friendList = document.querySelector('.friends-list');\n        if (friendList) {\n            friendList.style.display = 'none';\n            this.component.classList.add('chat-open');\n        }\n    }\n\n    hideChatUI() {\n        const chatUI = this.component.querySelector('.chat-ui-container');\n        if (chatUI) {\n            chatUI.style.display = 'none';\n            this.showFriendList();\n        }\n    }\n\n    showFriendList() {\n        const friendList = document.querySelector('.friends-list');\n        if (friendList) {\n            friendList.style.display = 'block';\n            this.component.classList.remove('chat-open');\n        }\n    }\n\n    toggleCloseButton() {\n        const chatToggleButton = document.createElement('button');\n        chatToggleButton.classList.add('chat-toggle-button');\n        chatToggleButton.textContent = 'X';\n\n        chatToggleButton.addEventListener('click', () => {\n            this.hideChatUI();\n        });\n\n        const chatHeader = this.component.querySelector('.chat-header');\n        chatHeader.appendChild(chatToggleButton);\n    }\n\n    scrollToBottom() {\n        window.scrollTo(0, document.documentElement.scrollHeight || document.body.scrollHeight);\n    }\n\n    toggleChatDisplay() {\n        const chatUI = this.component.querySelector('.chat-ui-container');\n        const screenWidth = window.innerWidth;\n\n        if (screenWidth <= 768 && chatUI && (chatUI.style.display === 'none' || chatUI.style.display === '')) {\n            this.showChatUI();\n            this.toggleCloseButton();\n            this.scrollToBottom();\n        }\n    }\n\n    initWebSocket() {\n        this.webSocketService.connect();\n    }\n\n    // Listen to incoming messages from the WebSocket\n    listenToMessages() {\n        this.webSocketService.listenToMessages((message) => {\n            // Handle incoming message\n            this.handleIncomingMessage(message);\n        });\n    }\n\n    // Handle incoming messages\n    handleIncomingMessage(message) {\n        // Implement your logic to display the incoming message in the chat UI\n        const chatMessagesContainer = this.component.querySelector(\".chat-messages\");\n        if (chatMessagesContainer) {\n            const messageElement = document.createElement(\"li\");\n            messageElement.textContent = message;\n            messageElement.classList.add(\"chat-message\");\n            chatMessagesContainer.appendChild(messageElement);\n        }\n    }\n\n    // Send a message using the WebSocket\n    sendMessage(message) {\n        if (this.store.getActiveFriend()) {\n            // Get the active friend's ID\n            const activeFriendId = this.store.getActiveFriend().id;\n\n            // Update the store with the sent message\n            this.store.addMessage(activeFriendId, {\n                text: message,\n                sender: 'user', // You can set the sender as needed\n                timestamp: new Date().toISOString(), // You can set the timestamp as needed\n            });\n\n            // Append the sent message to the chat messages container\n            const chatMessagesContainer = this.component.querySelector(\".chat-messages\");\n            if (chatMessagesContainer) {\n                this.appendMessageToChat(chatMessagesContainer, {\n                    text: message,\n                    sender: 'user',\n                    timestamp: new Date().toISOString(),\n                });\n            }\n\n            // Clear the currentMessage\n            this.currentMessage = '';\n\n            // Clear the input field\n            const messageInput = this.component.querySelector(\".message-input\");\n            messageInput.value = '';\n\n            // You can also send the message to the server or perform other actions here\n        }\n    }\n\n    appendMessageToChat(chatMessagesContainer, message) {\n        const messageElement = document.createElement(\"div\");\n        messageElement.textContent = message.text;\n    \n        messageElement.classList.add(\"chat-message\");\n    \n        // Determine the alignment of the message (left or right) based on sender\n        if (message.sender === 'user') {\n            messageElement.classList.add(\"user-message\");\n        } else {\n            messageElement.classList.add(\"friend-message\");\n        }\n    \n        // Create a <span> element for the timestamp\n        const timestampSpan = document.createElement(\"span\");\n        timestampSpan.textContent = this.formatTimestamp(message.timestamp);\n        timestampSpan.classList.add(\"chat-message-timestamp\");\n    \n        // Create a <span> element for the status (default: single tick)\n        const statusSpan = document.createElement(\"span\");\n        statusSpan.textContent = \"\\u2713\"; // Single tick symbol\n        statusSpan.classList.add(\"chat-message-status\");\n    \n        // Append the timestamp and status <span> elements to the message element\n        messageElement.appendChild(timestampSpan);\n        messageElement.appendChild(statusSpan);\n    \n        chatMessagesContainer.appendChild(messageElement);\n    \n        // Scroll to the bottom to show the latest message\n        this.scrollToBottom();\n    }\n\n    // Don't forget to disconnect the WebSocket when the chat is closed or the page is unloaded\n    disconnectWebSocket() {\n        this.webSocketService.disconnect();\n    }\n\n    formatTimestamp(timestamp) {\n        const date = new Date(timestamp);\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const ampm = hours >= 12 ? 'PM' : 'AM';\n        const formattedHours = hours % 12 || 12; // Convert 0 to 12 for AM\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n\n        return `${formattedHours}:${formattedMinutes} ${ampm}`;\n    }\n\n\n}\n\nexport default ChatController;\n","class WebSocketService {\n    constructor(serverURL) {\n        this.socket = null;\n        this.serverURL = serverURL; // The URL of your WebSocket server\n    }\n\n    connect() {\n        // Establish a WebSocket connection to the server\n        this.socket = io(this.serverURL);\n        this.socket.on(\"connect\", () => {\n            console.log(\"WebSocket connected.\");\n        });\n    }\n\n    disconnect() {\n        // Close the WebSocket connection\n        if (this.socket) {\n            this.socket.disconnect();\n        }\n    }\n\n\n    sendMessage(receiver,message) {\n        if (this.socket) {\n            // Send a message to the server\n            this.socket.emit(\"message\", { receiver, message });\n        }\n    }\n\n    listenToMessages(callback) {\n        if (this.socket) {\n            // Listen for incoming messages and invoke the callback with the message data\n            this.socket.on(\"message\", (data) => {\n                callback(data.message);\n            });\n        }\n    }\n}\n\nexport default WebSocketService;","// FriendController.js\nimport FriendService from '../../services/FriendServices.js';\n\nclass FriendController {\n    constructor(store) {\n        this.store = store;\n        this.controllerId = \"friend-controller\";\n        this.component = this.createFriendsPlaceholder(); // Create a placeholder for the component during construction\n    }\n\n    addChatController(controller) {\n        this.chatController = controller;\n    }\n\n    // Initialize the controller (call this when the page loads)\n    async init() {\n        await this.loadFriends(); // Load friends from the server or mock data\n        // Append the friend list to the placeholder\n        this.appendFriendsToComponent();\n    }\n\n    // Load friends from the service\n    async loadFriends() {\n        try {\n            const friendService = new FriendService();\n            this.friends = await friendService.getFriends();\n            this.store.setFriends(this.friends)\n        } catch (error) {\n            console.error(\"FriendController - Load Friends error:\", error);\n        }\n    }\n\n    // Method to set a friend as active\n    setActiveFriend(friend) {\n        this.store.setActiveFriend(friend);\n        this.chatController.renderChat();\n    }\n\n    // Method to render the active friend's information and messages in the UI\n    renderActiveFriend() {\n        // Implement this method to update the UI with the active friend's details\n        if (this.activeFriend) {\n            // Create the chat UI for the active friend\n            const chatUI = this.chatController.createChatUI();\n\n            // Find the chat container and replace its content with the chat UI\n            const chatContainer = document.querySelector(\".chat-ui-container\");\n            if (chatContainer) {\n                chatContainer.innerHTML = \"\"; // Clear existing content\n                chatContainer.appendChild(chatUI); // Append the chat UI\n            }\n        } else {\n            // No active friend is set, you can handle this case if needed\n        }\n    }\n\n    // Method to create a placeholder for the friends component\n    createFriendsPlaceholder() {\n        // Create a div with the friend-controller ID\n        const friendControllerDiv = document.createElement(\"div\");\n        friendControllerDiv.id = this.controllerId;\n\n        return friendControllerDiv;\n    }\n\n    // Method to append the friends list to the component\n    appendFriendsToComponent() {\n        if (this.component) {\n            // Create a friends list container\n            const friendsListContainer = this.createFriendsComponent();\n            this.component.appendChild(friendsListContainer);\n        }\n    }\n\n    // Method to create the friends component\n    createFriendsComponent() {\n        const friendsListContainer = document.createElement(\"div\");\n        friendsListContainer.classList.add(\"friends-list\");\n\n        // Loop through the friends and create a list item for each\n        this.friends.forEach((friend) => {\n            const friendListItem = document.createElement(\"div\");\n            friendListItem.classList.add(\"friend-list-item\");\n\n            // Create a circular status dot based on the friend's status\n            const statusDot = document.createElement(\"div\");\n            statusDot.classList.add(\"status-dot\", friend.status === \"active\" ? \"active-status\" : \"inactive-status\");\n\n            // Create a profile picture element for the friend\n            const profilePic = document.createElement(\"img\");\n            profilePic.src = friend.profilePic;\n            profilePic.alt = friend.name;\n            profilePic.classList.add(\"profile-pic\");\n\n            // Create a name element for the friend\n            const nameElement = document.createElement(\"span\");\n            nameElement.textContent = friend.name;\n            nameElement.classList.add(\"friend-name\");\n\n            // Create a last message element for the friend\n            const lastMessageElement = document.createElement(\"span\");\n            lastMessageElement.textContent = friend.lastMessage;\n            lastMessageElement.classList.add(\"friend-last-message\");\n\n            // Add a click event listener to set the friend as active when clicked\n            friendListItem.addEventListener(\"click\", () => {\n                console.log(friend);\n                this.setActiveFriend(friend);\n            });\n\n            // Append the status dot, profile picture, name, and last message to the list item\n            friendListItem.appendChild(statusDot);\n            friendListItem.appendChild(profilePic);\n            friendListItem.appendChild(nameElement);\n            friendListItem.appendChild(lastMessageElement);\n\n            friendListItem.addEventListener(\"click\", () => {\n                this.setActiveFriend(friend); // Trigger setActiveFriend when a friend is clicked\n                this.chatController.toggleChatDisplay();\n            });\n\n            // Append the list item to the friends list container\n            friendsListContainer.appendChild(friendListItem);\n        });\n\n        // Return the friends list container\n        return friendsListContainer;\n    }\n\n    // Method to get the friends container for rendering\n    getFriendsContainer() {\n        return this.component;\n    }\n}\n\nexport default FriendController;\n","\nimport FriendAPI from '../apis/friendApis.js';\n\nclass FriendService {\n    async getFriends() {\n        try {\n            // Call the API to fetch friends\n            const friends = await FriendAPI.getFriends();\n            return friends;\n        } catch (error) {\n            console.error(\"FriendService - Error fetching friends:\", error);\n            throw error;\n        }\n    }\n}\n\nexport default FriendService;\n","class FriendAPI {\n    // Simulated data for demonstration purposes (replace with actual API calls)\n    static async getFriends() {\n        return [\n            {\n                id: 1,\n                name: \"Brajesh Mishra\",\n                profilePic: \"https://www.emmegi.co.uk/wp-content/uploads/2019/01/User-Icon.jpg\",\n                publicKey: \"publicKey1\",\n                lastMessage: \"\",\n                status: \"active\"\n            },\n            {\n                id: 2,\n                name: \"Deepak Joshi\",\n                profilePic: \"https://www.emmegi.co.uk/wp-content/uploads/2019/01/User-Icon.jpg\",\n                publicKey: \"publicKey2\",\n                lastMessage: \"\",\n                status: \"InActive\"\n            },\n            // Add more friends as needed\n        ];\n    }\n}\n\nexport default FriendAPI;\n"],"names":[],"version":3,"file":"app.js.map"}